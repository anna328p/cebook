; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MCUFONT-DECODER\MF_SCALEDFONT.C"
	.assume ADL=1
	SEGMENT CODE
;    1	#include "mf_scaledfont.h"
;    2	
;    3	struct scaled_renderstate
;    4	{
;    5	    mf_pixel_callback_t orig_callback;
;    6	    void *orig_state;
;    7	    uint8_t x_scale;
;    8	    uint8_t y_scale;
;    9	    int16_t x0;
;   10	    int16_t y0;
;   11	};
;   12	
;   13	static void scaled_pixel_callback(int16_t x, int16_t y, uint8_t count,
;   14	                                  uint8_t alpha, void *state)
;   15	{
_scaled_pixel_callback:
	LD	HL,-1
	CALL	__frameset
;   16	    struct scaled_renderstate *rstate = state;
;   17	    uint8_t dy;
;   18	    
;   19	    count *= rstate->x_scale;
	LD	IY,(IX+18)
	LD	C,(IY+6)
	LD	D,(IX+12)
	LD	E,C
	MLT	DE
;   20	    x = rstate->x0 + x * rstate->x_scale;
	LD	B,0
	LD	HL,BC
	LD	(IX+12),E
	LD	BC,(IX+6)
	LD	DE,(IY+8)
	CALL	__smuls
	ADD.SIS	HL,DE
	LD	(IX+6),L
	LD	(IX+7),H
;   21	    y = rstate->y0 + y * rstate->y_scale;
	LD	C,(IY+7)
	LD	B,0
	LD	HL,(IX+9)
	CALL	__smuls
	LD	BC,(IY+10)
	ADD.SIS	HL,BC
	LD	(IX+9),L
	LD	(IX+10),H
;   22	    
;   23	    for (dy = 0; dy < rstate->y_scale; dy++)
	LD	(IX+-1),0
	JR	L_3
L_1:
;   24	    {
;   25	        rstate->orig_callback(x, y + dy, count, alpha, rstate->orig_state);
	LD	IY,(IX+18)
	LD	DE,(IY+0)
	LD	BC,(IY+3)
	PUSH	BC
	LD	C,(IX+15)
	LD	B,0
	PUSH	BC
	LD	C,(IX+12)
	PUSH	BC
	LD	C,(IX+-1)
	LD	HL,(IX+9)
	ADD.SIS	HL,BC
	PUSH	HL
	LD	BC,(IX+6)
	PUSH	BC
	LD	IY,DE
	CALL	__indcall
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	INC	(IX+-1)
;   26	    }
L_3:
	LD	A,(IX+-1)
	LD	IY,(IX+18)
	CP	A,(IY+7)
	JR	C,L_1
;   27	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _scaled_pixel_callback ***************************
;Name                         Addr/Register   Size   Type
;dy                                    IX-1      1   variable
;state                                IX+18      3   parameter
;alpha                                IX+15      1   parameter
;count                                IX+12      1   parameter
;y                                     IX+9      2   parameter
;x                                     IX+6      2   parameter


; Stack Frame Size: 22 (bytes)
;       Spill Code: 0 (instruction)


;   28	    
;   29	static uint8_t scaled_character_width(const struct mf_font_s *font,
;   30	                                      mf_char character)
;   31	{
_scaled_character_width:
	LD	HL,-1
	CALL	__frameset
;   32	    struct mf_scaledfont_s *sfont = (struct mf_scaledfont_s*)font;
;   33	    uint8_t basewidth;
;   34	    
;   35	    basewidth = sfont->basefont->character_width(sfont->basefont, character);
	LD	IY,(IX+6)
	LD	IY,(IY+22)
	LD	BC,(IY+16)
	LD	DE,(IX+9)
	PUSH	DE
	LD	IY,(IX+6)
	LD	DE,(IY+22)
	PUSH	DE
	LD	IY,BC
	CALL	__indcall
	POP	BC
	POP	BC
	LD	(IX+-1),A
;   36	    
;   37	    return sfont->x_scale * basewidth;
	LD	IY,(IX+6)
	LD	B,(IY+25)
	LD	C,(IX+-1)
	MLT	BC
	LD	A,C
;   38	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _scaled_character_width ***************************
;Name                         Addr/Register   Size   Type
;basewidth                             IX-1      1   variable
;character                             IX+9      2   parameter
;font                                  IX+6      3   parameter


; Stack Frame Size: 13 (bytes)
;       Spill Code: 0 (instruction)


;   39	
;   40	static uint8_t scaled_render_character(const struct mf_font_s *font,
;   41	                                       int16_t x0, int16_t y0,
;   42	                                       mf_char character,
;   43	                                       mf_pixel_callback_t callback,
;   44	                                       void *state)
;   45	{
_scaled_render_character:
	LD	HL,-13
	CALL	__frameset
;   46	    struct mf_scaledfont_s *sfont = (struct mf_scaledfont_s*)font;
;   47	    struct scaled_renderstate rstate;
;   48	    uint8_t basewidth;
;   49	    
;   50	    rstate.orig_callback = callback;
	LD	BC,(IX+18)
	LD	(IX+-13),BC
;   51	    rstate.orig_state = state;
	LD	BC,(IX+21)
	LD	(IX+-10),BC
;   52	    rstate.x_scale = sfont->x_scale;
	LD	IY,(IX+6)
	LD	A,(IY+25)
	LD	(IX+-7),A
;   53	    rstate.y_scale = sfont->y_scale;
	LD	A,(IY+26)
	LD	(IX+-6),A
;   54	    rstate.x0 = x0;
	LD	BC,(IX+9)
	LD	(IX+-5),C
	LD	(IX+-4),B
;   55	    rstate.y0 = y0;
	LD	BC,(IX+12)
	LD	(IX+-3),C
	LD	(IX+-2),B
;   56	    
;   57	    basewidth = sfont->basefont->render_character(sfont->basefont, 0, 0,
;   58	                            character, scaled_pixel_callback, &rstate);
	PEA	IX+-13
	LD	IY,(IY+22)
	LD	BC,_scaled_pixel_callback
	PUSH	BC
	LD	BC,(IY+19)
	LD	DE,(IX+15)
	PUSH	DE
	LD	DE,0
	PUSH	DE
	PUSH	DE
	LD	IY,(IX+6)
	LD	DE,(IY+22)
	PUSH	DE
	LD	IY,BC
	CALL	__indcall
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-1),A
;   59	    
;   60	    return sfont->x_scale * basewidth;
	LD	IY,(IX+6)
	LD	B,(IY+25)
	LD	C,(IX+-1)
	MLT	BC
	LD	A,C
;   61	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _scaled_render_character ***************************
;Name                         Addr/Register   Size   Type
;rstate                               IX-13     12   variable
;basewidth                             IX-1      1   variable
;state                                IX+21      3   parameter
;callback                             IX+18      3   parameter
;character                            IX+15      2   parameter
;y0                                   IX+12      2   parameter
;x0                                    IX+9      2   parameter
;font                                  IX+6      3   parameter


; Stack Frame Size: 37 (bytes)
;       Spill Code: 0 (instruction)


;   62	
;   63	void mf_scale_font(struct mf_scaledfont_s *newfont,
;   64	                   const struct mf_font_s *basefont,
;   65	                   uint8_t x_scale, uint8_t y_scale)
;   66	{
_mf_scale_font:
	LD	HL,-3
	CALL	__frameset
;   67	    newfont->font = *basefont;
	LD	IY,(IX+6)
	LEA	BC,IY+0
	LD	(IX+-3),BC
	LEA	DE,IY+0
	LD	HL,(IX+9)
	LD	BC,22
	LDIR	
;   68	    newfont->basefont = basefont;
	LD	BC,(IX+9)
	LD	(IY+22),BC
;   69	    
;   70	    newfont->font.width *= x_scale;
	LD	IY,(IX+-3)
	LD	B,(IY+6)
	LD	C,(IX+12)
	MLT	BC
	LD	(IY+6),C
;   71	    newfont->font.height *= y_scale;
	LD	B,(IY+7)
	LD	C,(IX+15)
	MLT	BC
	LD	(IY+7),C
;   72	    newfont->font.baseline_x *= x_scale;
	LD	B,(IY+10)
	LD	C,(IX+12)
	MLT	BC
	LD	(IY+10),C
;   73	    newfont->font.baseline_y *= y_scale;
	LD	B,(IY+11)
	LD	C,(IX+15)
	MLT	BC
	LD	(IY+11),C
;   74	    newfont->font.min_x_advance *= x_scale;
	LD	B,(IY+8)
	LD	C,(IX+12)
	MLT	BC
	LD	(IY+8),C
;   75	    newfont->font.max_x_advance *= x_scale;
	LD	B,(IY+9)
	LD	C,(IX+12)
	MLT	BC
	LD	(IY+9),C
;   76	    newfont->font.line_height *= y_scale;
	LD	B,(IY+12)
	LD	C,(IX+15)
	MLT	BC
	LD	(IY+12),C
;   77	    newfont->font.character_width = &scaled_character_width;
	LD	BC,_scaled_character_width
	LD	(IY+16),BC
;   78	    newfont->font.render_character = &scaled_render_character;
	LD	BC,_scaled_render_character
	LD	(IY+19),BC
;   79	    
;   80	    newfont->x_scale = x_scale;
	LD	A,(IX+12)
	LD	IY,(IX+6)
	LD	(IY+25),A
;   81	    newfont->y_scale = y_scale;
	LD	A,(IX+15)
	LD	(IY+26),A
;   82	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _mf_scale_font ***************************
;Name                         Addr/Register   Size   Type
;y_scale                              IX+15      1   parameter
;x_scale                              IX+12      1   parameter
;basefont                              IX+9      3   parameter
;newfont                               IX+6      3   parameter


; Stack Frame Size: 21 (bytes)
;       Spill Code: 0 (instruction)


	XREF __indcall:ROM
	XREF __smuls:ROM
	XREF __frameset:ROM
	XDEF _mf_scale_font
	END
