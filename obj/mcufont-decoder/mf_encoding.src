; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MCUFONT-DECODER\MF_ENCODING.C"
	.assume ADL=1
	SEGMENT CODE
;    1	#include "mf_encoding.h"
;    2	
;    3	#if MF_ENCODING == MF_ENCODING_UTF8
;    4	
;    5	mf_char mf_getchar(mf_str *str)
;    6	{
_mf_getchar:
	LD	HL,-5
	CALL	__frameset
;    7	    uint8_t c;
;    8	    uint8_t tmp, seqlen;
;    9	    uint16_t result;
;   10	    
;   11	    c = **str;
	LD	HL,(IX+6)
	LD	HL,(HL)
	LD	A,(HL)
	LD	(IX+-1),A
;   12	    if (!c)
	OR	A,A
	JR	NZ,L_2
	OR	A,A
;   13	        return 0;
	SBC	HL,HL
	JR	L_16
L_2:
;   14	    
;   15	    (*str)++;
	LD	HL,(IX+6)
	LD	BC,(HL)
	INC	BC
	LD	HL,(IX+6)
	LD	(HL),BC
;   16	    
;   17	    if ((c & 0x80) == 0)
	LD	A,(IX+-1)
	AND	A,128
	JR	NZ,L_15
;   18	    {
;   19	        /* Just normal ASCII character. */
;   20	        return c;
	LD	C,(IX+-1)
	LD	B,0
	LD	HL,BC
	JR	L_16
;   21	    }
;   22	    else if ((c & 0xC0) == 0x80)
L_15:
	LD	A,(IX+-1)
	AND	A,192
	CP	A,128
	JR	NZ,L_13
;   23	    {
;   24	        /* Dangling piece of corrupted multibyte sequence.
;   25	         * Did you cut the string in the wrong place?
;   26	         */
;   27	        return c;
	LD	C,(IX+-1)
	LD	B,0
	LD	HL,BC
	JR	L_16
;   28	    }
;   29	    else if ((**str & 0xC0) == 0xC0)
L_13:
	LD	HL,(IX+6)
	LD	HL,(HL)
	LD	A,(HL)
	AND	A,192
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,192
	SBC	HL,BC
	JR	NZ,L_11
;   30	    {
;   31	        /* Start of multibyte sequence without any following bytes.
;   32	         * Silly. Maybe you are using the wrong encoding.
;   33	         */
;   34	        return c;
	LD	C,(IX+-1)
	LD	B,0
	LD	HL,BC
	JR	L_16
;   35	    }
;   36	    else
L_11:
;   37	    {
;   38	        /* Beginning of a multi-byte sequence.
;   39	         * Find out how many characters and combine them.
;   40	         */
;   41	        seqlen = 2;
	LD	(IX+-4),2
;   42	        tmp = 0x20;
	LD	(IX+-5),32
;   43	        result = 0;
	LD	(IX+-3),0
	LD	(IX+-2),0
;   44	        while ((c & tmp) && (seqlen < 5))
	JR	L_6
L_7:
;   45	        {
;   46	            seqlen++;
	INC	(IX+-4)
;   47	            tmp >>= 1;
	LD	A,(IX+-5)
	UEXT	HL
	LD	L,A
	LD	A,1
	CALL	__ishrs_b
	LD	(IX+-5),L
;   48	            
;   49	            result = (result << 6) | (**str & 0x3F);
	LD	HL,(IX+6)
	LD	HL,(HL)
	LD	A,(HL)
	AND	A,63
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	C,A
	LD	B,0
	ADD	HL,HL
	ADD	HL,HL
	LD	DE,BC
	LD	BC,HL
	LD	HL,DE
	CALL	__sor
	LD	(IX+-3),L
	LD	(IX+-2),H
;   50	            (*str)++;
	LD	HL,(IX+6)
	LD	BC,(HL)
	INC	BC
	LD	HL,(IX+6)
	LD	(HL),BC
;   51	        }
L_6:
	LD	A,(IX+-1)
	AND	A,(IX+-5)
	JR	Z,L_8
	LD	A,(IX+-4)
	CP	A,5
	JR	C,L_7
L_8:
;   52	        
;   53	        result = (result << 6) | (**str & 0x3F);
	LD	HL,(IX+6)
	LD	HL,(HL)
	LD	A,(HL)
	AND	A,63
	LD	HL,(IX+-3)
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	C,A
	LD	B,0
	ADD	HL,HL
	ADD	HL,HL
	LD	DE,BC
	LD	BC,HL
	LD	HL,DE
	CALL	__sor
	LD	(IX+-3),L
	LD	(IX+-2),H
;   54	        (*str)++;
	LD	HL,(IX+6)
	LD	BC,(HL)
	INC	BC
	LD	HL,(IX+6)
	LD	(HL),BC
;   55	        
;   56	        result |= (c & (tmp - 1)) << ((seqlen - 1) * 6);
	LD	A,(IX+-5)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	C,L
	LD	B,0
	LD	HL,BC
	LD	C,(IX+-1)
	CALL	__sand
	LD	C,(IX+-4)
	LD	B,0
	LD	DE,HL
	LD.LIS	HL,6
	DEC	BC
	CALL	__smulu
	LD	BC,HL
	LD	HL,DE
	CALL	__sshl
	LD	BC,(IX+-3)
	CALL	__sor
	LD	(IX+-3),L
	LD	(IX+-2),H
;   57	        return result;
	LD	HL,(IX+-3)
;   58	    }
;   59	}
L_16:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _mf_getchar ***************************
;Name                         Addr/Register   Size   Type
;tmp                                   IX-5      1   variable
;seqlen                                IX-4      1   variable
;result                                IX-3      2   variable
;c                                     IX-1      1   variable
;str                                   IX+6      3   parameter


; Stack Frame Size: 14 (bytes)
;       Spill Code: 0 (instruction)


;   60	
;   61	void mf_rewind(mf_str *str)
;   62	{
_mf_rewind:
	CALL	__frameset0
;   63	    (*str)--;
	LD	HL,(IX+6)
	LD	IY,(HL)
	LEA	BC,IY+-1
	LD	HL,(IX+6)
	LD	(HL),BC
;   64	    
;   65	    while ((**str & 0x80) != 0x00 && (**str & 0xC0) != 0xC0)
	JR	L_20
L_21:
;   66	        (*str)--;
	LD	HL,(IX+6)
	LD	IY,(HL)
	LEA	BC,IY+-1
	LD	HL,(IX+6)
	LD	(HL),BC
L_20:
	LD	HL,(IX+6)
	LD	HL,(HL)
	LD	A,(HL)
	AND	A,128
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	Z,L_22
	LD	HL,(IX+6)
	LD	HL,(HL)
	LD	A,(HL)
	AND	A,192
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,192
	SBC	HL,BC
	JR	NZ,L_21
;   67	}
L_22:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _mf_rewind ***************************
;Name                         Addr/Register   Size   Type
;str                                   IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


	XREF __sor:ROM
	XREF __sand:ROM
	XREF __smulu:ROM
	XREF __sshl:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __icmpzero:ROM
	XREF __ishrs_b:ROM
	XDEF _mf_rewind
	XDEF _mf_getchar
	END
