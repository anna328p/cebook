; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT CODE
;    1	#include <tice.h>
;    2	#include <graphx.h>
;    3	#include <debug.h>
;    4	
;    5	#include "mcufont-decoder/mcufont.h"
;    6	
;    7	struct state_t {
;    8	    uint16_t width;
;    9	    uint16_t height;
;   10	    uint16_t y;
;   11	    const struct mf_font_s *font;
;   12	};
;   13	
;   14	
;   15	typedef struct state_t state_t;
;   16	
;   17	/* Callback to write to a memory buffer. */
;   18	static void pixel_callback(int16_t x, int16_t y, uint8_t count, uint8_t alpha, void *state) {
_pixel_callback:
	LD	HL,-5
	CALL	__frameset
;   19	    uint32_t pos;
;   20	    uint8_t *pixels = malloc(count);
	LD	A,(IX+12)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_malloc
	POP	BC
	LD	(IX+-5),HL
;   21	    uint8_t cur_pix;
;   22	    uint8_t next_val;
;   23	
;   24	
;   25	    if (y < 0 || y >= 240) return;
	LD	HL,(IX+9)
	CALL	__scmpzero
	CALL	__setflag
	JP	M,L_12
	LD.LIS	BC,240
	LD	HL,(IX+9)
	OR	A,A
	SBC.SIS	HL,BC
	CALL	__setflag
	JP	P,L_12
;   26	    if (x < 0 || x + count >= 320) return;
	LD	HL,(IX+6)
	CALL	__scmpzero
	CALL	__setflag
	JP	M,L_12
	LD	BC,(IX+6)
	CALL	__stoi
	LD	BC,HL
	LD	A,(IX+12)
	UEXT	HL
	LD	L,A
	ADD	HL,BC
	OR	A,A
	LD	BC,320
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_9
	JR	L_12
;   27	
;   28	
;   29	    while (count--) {
L_10:
;   30	        cur_pix = gfx_GetPixel(x, y);
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	CALL	__stoi
	PUSH	HL
	CALL	_gfx_GetPixel
	POP	BC
	POP	BC
	LD	(IX+-2),A
;   31	        next_val = cur_pix + (alpha >> 4);
	LD	A,(IX+15)
	UEXT	HL
	LD	L,A
	LD	A,4
	CALL	__ishrs_b
	LD	A,L
	ADD	A,(IX+-2)
	LD	(IX+-1),A
;   32	        if (next_val > 15) next_val = 15;
	LD	A,15
	CP	A,(IX+-1)
	JR	NC,L_7
	LD	(IX+-1),15
L_7:
;   33	        gfx_SetColor(next_val);
	LD	C,(IX+-1)
	LD	B,0
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   34	        gfx_SetPixel(x, y);
	LD	C,(IX+9)
	LD	B,0
	PUSH	BC
	LD	BC,(IX+6)
	CALL	__stoi
	PUSH	HL
	CALL	_gfx_SetPixel
	POP	BC
	POP	BC
;   35	
;   36	        x++;
	LD	HL,(IX+6)
	INC	HL
	LD	(IX+6),L
	LD	(IX+7),H
;   37	    }
L_9:
	LD	A,(IX+12)
	DEC	(IX+12)
	OR	A,A
	JR	NZ,L_10
;   38	}
L_12:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _pixel_callback ***************************
;Name                         Addr/Register   Size   Type
;_gfx_SetPixel                       IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_GetPixel                       IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;pixels                                IX-5      3   variable
;cur_pix                               IX-2      1   variable
;next_val                              IX-1      1   variable
;state                                IX+18      3   parameter
;alpha                                IX+15      1   parameter
;count                                IX+12      1   parameter
;y                                     IX+9      2   parameter
;x                                     IX+6      2   parameter


; Stack Frame Size: 26 (bytes)
;       Spill Code: 0 (instruction)


;   39	
;   40	/* Callback to render characters. */
;   41	static uint8_t character_callback(int16_t x, int16_t y, mf_char character,
;   42	        void *state)
;   43	{
_character_callback:
	CALL	__frameset0
;   44	    state_t *s = (state_t*)state;
;   45	    return mf_render_character(s->font, x, y, character, pixel_callback, state);
	LD	BC,(IX+15)
	PUSH	BC
	LD	BC,_pixel_callback
	PUSH	BC
	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	IY,(IX+15)
	LD	BC,(IY+6)
	PUSH	BC
	CALL	_mf_render_character
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;   46	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _character_callback ***************************
;Name                         Addr/Register   Size   Type
;_mf_render_character                IMPORT  -----   function
;state                                IX+15      3   parameter
;character                            IX+12      2   parameter
;y                                     IX+9      2   parameter
;x                                     IX+6      2   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


;   47	
;   48	/* Callback to render lines. */
;   49	static bool line_callback(const char *line, uint16_t count, void *state)
;   50	{
_line_callback:
	CALL	__frameset0
;   51	    state_t *s = (state_t*)state;
;   52	
;   53	    mf_render_justified(s->font, 10, s->y,
;   54	            s->width - 20,
;   55	            line, count, character_callback, state);
	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,_character_callback
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+6)
	PUSH	BC
	LD	IY,(IX+12)
	LD	IY,(IY+0)
	LEA	BC,IY+-20
	PUSH	BC
	LD	IY,(IX+12)
	LD	BC,(IY+4)
	PUSH	BC
	LD	BC,10
	PUSH	BC
	LD	BC,(IY+6)
	PUSH	BC
	CALL	_mf_render_justified
	LD	IY,24
	ADD	IY,SP
	LD	SP,IY
;   56	    s->y += s->font->line_height;
	LD	IY,(IX+12)
	LD	IY,(IY+6)
	LD	C,(IY+12)
	LD	B,0
	LD	IY,(IX+12)
	LD	DE,(IY+4)
	LD	HL,BC
	ADD.SIS	HL,DE
	LD	BC,HL
	LD	(IY+4),C
	LD	(IY+5),B
;   57	    return true;
	LD	A,1
;   58	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _line_callback ***************************
;Name                         Addr/Register   Size   Type
;_mf_render_justified                IMPORT  -----   function
;state                                IX+12      3   parameter
;count                                 IX+9      2   parameter
;line                                  IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


;   59	
;   60	/* Callback to just count the lines.
;   61	 * Used to decide the image height */
;   62	bool count_lines(const char *line, uint16_t count, void *state)
;   63	{
_count_lines:
	CALL	__frameset0
;   64	    int *linecount = (int*)state;
;   65	    (*linecount)++;
	LD	HL,(IX+12)
	LD	BC,(HL)
	INC	BC
	LD	HL,(IX+12)
	LD	(HL),BC
;   66	    return true;
	LD	A,1
;   67	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _count_lines ***************************
;Name                         Addr/Register   Size   Type
;state                                IX+12      3   parameter
;count                                 IX+9      2   parameter
;line                                  IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


;   68	
;   69	void fill_palette(void) {
_fill_palette:
;   70	    memset(gfx_palette, 0, 256);
	LD	BC,256
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,14877184
	PUSH	BC
	CALL	_memset
	POP	BC
	POP	BC
	POP	BC
;   71	
;   72	    dbg_sprintf(dbgout, "palette %d\n", gfx_RGBTo1555(112, 112, 112));
;   73	    gfx_palette[0]  = gfx_RGBTo1555(243, 157, 101);
	LD	HL,14877184
	LD	(HL),108
	INC	HL
	LD	(HL),122
;   74	    gfx_palette[1]  = gfx_RGBTo1555(228, 144, 89);
	LD	HL,14877186
	LD	(HL),75
	INC	HL
	LD	(HL),114
;   75	    gfx_palette[2]  = gfx_RGBTo1555(214, 132, 77);
	LD	HL,14877188
	LD	(HL),9
	INC	HL
	LD	(HL),106
;   76	    gfx_palette[3]  = gfx_RGBTo1555(199, 119, 65);
	LD	HL,14877190
	LD	(HL),200
	INC	HL
	LD	(HL),97
;   77	    gfx_palette[4]  = gfx_RGBTo1555(185, 107, 54);
	LD	HL,14877192
	LD	(HL),166
	INC	HL
	LD	(HL),93
;   78	    gfx_palette[5]  = gfx_RGBTo1555(171, 95, 42);
	LD	HL,14877194
	LD	(HL),101
	INC	HL
	LD	(HL),85
;   79	    gfx_palette[6]  = gfx_RGBTo1555(157, 83, 31);
	LD	HL,14877196
	LD	(HL),67
	INC	HL
	LD	(HL),77
;   80	    gfx_palette[7]  = gfx_RGBTo1555(143, 71, 19);
	LD	HL,14877198
	LD	(HL),2
	INC	HL
	LD	(HL),69
;   81	    gfx_palette[8]  = gfx_RGBTo1555(129, 60, 6);
	LD	HL,14877200
	LD	(HL),224
	INC	HL
	LD	(HL),64
;   82	    gfx_palette[9]  = gfx_RGBTo1555(115, 49, 0);
	LD	HL,14877202
	LD	(HL),192
	INC	HL
	LD	(HL),56
;   83	    gfx_palette[10] = gfx_RGBTo1555(102, 38, 0);
	LD	HL,14877204
	LD	(HL),128
	INC	HL
	LD	(HL),48
;   84	    gfx_palette[11] = gfx_RGBTo1555(89, 26, 0);
	LD	HL,14877206
	LD	(HL),96
	INC	HL
	LD	(HL),44
;   85	    gfx_palette[12] = gfx_RGBTo1555(78, 14, 0);
	LD	HL,14877208
	LD	(HL),32
	INC	HL
	LD	(HL),36
;   86	    gfx_palette[13] = gfx_RGBTo1555(67, 2, 0);
	LD	HL,14877210
	LD	(HL),0
	INC	HL
	LD	(HL),32
;   87	    gfx_palette[14] = gfx_RGBTo1555(58, 0, 0);
	LD	HL,14877212
	LD	(HL),0
	INC	HL
	LD	(HL),28
;   88	    gfx_palette[15] = gfx_RGBTo1555(0, 0, 0);
	LD	HL,14877214
	LD	(HL),0
	INC	HL
	LD	(HL),0
;   89	}
	RET	


;**************************** _fill_palette ***************************
;Name                         Addr/Register   Size   Type
;_memset                             IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;   90	
;   91	/* Main function, called first */
;   92	int main(void) {
_main:
	LD	HL,-15
	CALL	__frameset
;   93	    const struct mf_font_s *font;
;   94	    struct mf_scaledfont_s scaledfont;
;   95	    struct state_t state;
;   96	
;   97	    const char *text = "I'd just like to interject for a moment. What you're referring to as TI-84, is in fact, Zilog eZ80 Toolchain/TI-84 Plus CE, or as I've recently taken to calling it, utter garbage";
	LD	BC,L__11
	LD	(IX+-6),BC
;   98	
;   99	    gfx_Begin();
	CALL	_gfx_Begin
;  100	    gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;  101	
;  102	    fill_palette();
	CALL	_fill_palette
;  103	
;  104	    gfx_FillScreen(0);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  105	    gfx_BlitBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  106	
;  107	    gfx_SetColor(15);
	LD	BC,15
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  108	
;  109	    font = mf_find_font(mf_get_font_list()->font->short_name);
	CALL	_mf_get_font_list
	LD	IY,HL
	LD	IY,(IY+3)
	LD	BC,(IY+3)
	PUSH	BC
	CALL	_mf_find_font
	POP	BC
	LD	(IX+-3),HL
;  110	
;  111	    state.width = 320;
	LD	(IX+-15),64
	LD	(IX+-14),1
;  112	    state.height = 240;
	LD	(IX+-13),240
	LD	(IX+-12),0
;  113	    state.y = 2;
	LD	(IX+-11),2
	LD	(IX+-10),0
;  114	    state.font = font;
	LD	(IX+-9),HL
;  115	
;  116	    mf_wordwrap(font, 320, text, line_callback, &state);
	PEA	IX+-15
	LD	BC,_line_callback
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_mf_wordwrap
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  117	    gfx_BlitBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  118	
;  119	    /* Waits for a keypress */
;  120	    while (!os_GetCSC());
L_21:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_21
;  121	
;  122	    gfx_End();
	CALL	_gfx_End
	OR	A,A
;  123	
;  124	    /* Return 0 for success */
;  125	    return 0;
	SBC	HL,HL
;  126	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_mf_wordwrap                        IMPORT  -----   function
;_mf_get_font_list                   IMPORT  -----   function
;_mf_find_font                       IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_Blit                           IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;state                                IX-15      9   variable
;text                                  IX-6      3   variable
;font                                  IX-3      3   variable


; Stack Frame Size: 21 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__11:
	DB	"I'd just like to interject for a moment. What you're referring to as TI-84, is in fact, Zilog eZ80 Toolchain/TI-84 Plus CE, or as I've recently taken to calling it, utter garbage"
	DB	0
	XREF _memset:ROM
	XREF _mf_wordwrap:ROM
	XREF _mf_render_justified:ROM
	XREF _mf_get_font_list:ROM
	XREF _mf_find_font:ROM
	XREF _mf_render_character:ROM
	XREF _gfx_Blit:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_GetPixel:ROM
	XREF _gfx_SetPixel:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _malloc:ROM
	XREF _os_GetCSC:ROM
	XREF __stoi:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __scmpzero:ROM
	XREF __ishrs_b:ROM
	XDEF _main
	XDEF _fill_palette
	XDEF _count_lines
	END
